/*
 *  Copyright 2000-2011 Intel Corporation All Rights Reserved
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//   93    // Total instruction count
//    1    // Total kernel count


// Module name: common.inc
//
// Common header file for all Video-Processing kernels
//

.default_execution_size (16)
.default_register_type  :ub

.reg_count_total        128
.reg_count_payload      7

//========== Common constants ==========


//========== Macros ==========


//Fast Jump, For more details see "Set_Layer_N.asm"


//========== Defines ====================

//========== Static Parameters (Common To All) ==========
//r1


//r2

                                    //  e.g.            byte0   byte1  byte2
                                    // YUYV               0       1      3
                                    // YVYU               0       3      1

//Color Pipe (IECP) parameters


//r4

                                    //  e.g.              byte0           byte1           byte2
                                    // YUYV                 0               1               3
                                    // YVYU                 0               3               1


//========== Inline parameters (Common To All) ===========


//============== Binding Index Table===========
//Common between DNDI and DNUV


//================= Common Message Descriptor =====
// Message descriptor for thread spawning
// Message Descriptors
//                = 000 0001 (min message len 1 ) 0,0000 (resp len 0   -add later)
//                  0000,0000,0000
//                  0001(Spawn a root thread),0001 (Root thread spawn thread)
//                = 0x02000011
// Thread Spawner Message Descriptor


// Message descriptor for atomic operation add
// Message Descriptors
//                = 000 0110 (min message len 6 ) 0,0000 (resp len 0   -add later)
//                  1(header present)001,10(typed atomic operation)0(return enabled)0(slot group, low 8 bits),0111 (AOP_Add)
//                  0000,0000 (Binding table index, added later)
//                = 0x02000011

// Atomic Operation Add Message Descriptor


// Message descriptor for dataport media write
        // Message Descriptors
                //                = 000 0001 (min message len 1 - add later) 00000 (resp len 0)
                //                  1 (header present 1) 0 1010 (media block write) 000000
                //                  00000000 (binding table index - set later)
                //                = 0x020A8000


// Message Length defines


// Response Length defines


// Block Width and Height Size defines


// Extended Message Descriptors


// Common message descriptors:


//===================== Math Function Control ===================================


//============ Message Registers ===============
                             // buf4 starts from r28


//#define mMSGHDR_EOT  r43    // Dummy Message Register for EOT


.declare    mubMSGPAYLOAD  Base=r30 ElementSize=1 SrcRegion=<16;16,1> Type=ub
.declare    muwMSGPAYLOAD  Base=r30 ElementSize=2 SrcRegion=<16;16,1> Type=uw
.declare    mudMSGPAYLOAD  Base=r30 ElementSize=4 SrcRegion=<8;8,1> Type=ud
.declare    mfMSGPAYLOAD   Base=r30 ElementSize=4 SrcRegion=<8;8,1> Type=f

//=================== End of thread instruction ===========================


//=====================Pointers Used=====================================


//=======================================================================


//r9-r17
// Define temp space for any usages


// Common Buffers


// End of common.inc

// Module name: Save_AVS_NV12.asm
//
// Save NV12 420 frame data block of size 16x16
//
// To save 16x16 block (16x16 bytes of Y and 16x8 bytes of interleaved UV), we need 2 send instructions with of size 16x16 and 16x8 each.
//  ---------------
//  |    16x16    |
//  |    YUYV     |
//  ---------------
//  | 16x8  UV	  |
//  ---------------

//-----------------------------------------------------------------
//The layout of data is as follows:
//mMSGHDR0			: Y data header (16x16)
//mubMSGPAYLOAD0	: Y data payload (8 GRFs)
//mMSGHDR1			: U data header (16x8)
//mubMSGPAYLOAD1	: U data payload (4 GRFs)
//------------------------------------------------------------------


// Module name: Save.inc


// Description: Includes all definitions explicit to Fast Composite.


// End of common.inc


//========== GRF partition ==========
     // r0 header            :   r0          (1 GRF)
     // Static parameters    :   r1 - r6     (6 GRFS)
     // Inline parameters    :   r7 - r8     (2 GRFs)
     // MSGSRC               :   r27         (1 GRF)
//===================================

//Interface:
//========== Static Parameters (Explicit To Fast Composite) ==========
//r1
//CSC Set 0


.declare udCSC_CURBE    Base=r1.0      ElementSize=4       Type=ud

//Constant alpha


//r2


// WiDi Definitions


//Colorfill


.declare ubCOLOR_PIXEL_VAL      Base=r2.20      ElementSize=1       SrcRegion=<0;1,0>       DstRegion=<1>       Type=ub

//r3
//Normalised Ratio of Horizontal step size with main video for all layers


    //Normalised Ratio of Horizontal step size with main video for all layers becomes
    //Normalised Horizontal step size for all layers in VP_Setup.asm


//r4
//Normalised Vertical step size for all layers


//r5
//Normalised Vertical Frame Origin for all layers


//r6
//Normalised Horizontal Frame Origin for all layers


//========== Inline Parameters (Explicit To Fast Composite) ==========


//Main video Step X


//====================== Binding table (Explicit To Fast Composite)=========================================


//Used by Interlaced Scaling Kernels


//========== Sampler State Table Index (Explicit To Fast Composite)==========
//Sampler Index for AVS/IEF messages


//Sampler Index for SIMD16 sampler messages


//=============================================================================

.declare fBUFFER_0      Base=r64.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f
.declare fBUFFER_1      Base=r80.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f
.declare fBUFFER_2      Base=r96.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f
.declare fBUFFER_3      Base=r112.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f
.declare fBUFFER_4      Base=r28.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f
.declare fBUFFER_5      Base=r46.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=f

.declare udBUFFER_0     Base=r64.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud
.declare udBUFFER_1     Base=r80.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud
.declare udBUFFER_2     Base=r96.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud
.declare udBUFFER_3     Base=r112.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud
.declare udBUFFER_4     Base=r28.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud
.declare udBUFFER_5     Base=r46.0       ElementSize=4       SrcRegion=<8;8,1>       DstRegion=<1>       Type=ud

.declare uwBUFFER_0     Base=r64.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw
.declare uwBUFFER_1     Base=r80.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw
.declare uwBUFFER_2     Base=r96.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw
.declare uwBUFFER_3     Base=r112.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw
.declare uwBUFFER_4     Base=r28.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw
.declare uwBUFFER_5     Base=r46.0       ElementSize=2       SrcRegion=<16;16,1>     DstRegion=<1>       Type=uw

.declare ubBUFFER_0     Base=r64.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub
.declare ubBUFFER_1     Base=r80.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub
.declare ubBUFFER_2     Base=r96.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub
.declare ubBUFFER_3     Base=r112.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub
.declare ubBUFFER_4     Base=r28.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub
.declare ubBUFFER_5     Base=r46.0       ElementSize=1       SrcRegion=<16;16,1>     DstRegion=<1>       Type=ub

.declare ub4BUFFER_0    Base=r64.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub
.declare ub4BUFFER_1    Base=r80.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub
.declare ub4BUFFER_2    Base=r96.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub
.declare ub4BUFFER_3    Base=r112.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub
.declare ub4BUFFER_4    Base=r28.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub
.declare ub4BUFFER_5    Base=r46.0       ElementSize=1       SrcRegion=<32;8,4>      DstRegion=<4>       Type=ub

//Pointer to mask reg


//r18


//Always keep Cannel Pointers and Offsets in same GRF, so that we can use
// NODDCLR, NODDCHK flags. -rT


.declare udCSC_COEFF_0  Base=r18.0    ElementSize=4 Type=ud       // 1 GRF

//r19


.declare udCSC_COEFF_1  Base=r19.0    ElementSize=4 Type=ud       // 1 GRF


//r20

.declare uwALPHA_MASK_REG_TEMP  Base=r20.0    ElementSize=2 SrcRegion=<16;16,1> Type=uw        // 1 GRF

//r21

.declare uwALPHA_MASK_REG       Base=r21.0         ElementSize=2 SrcRegion=<16;16,1> Type=uw        // 1 GRF

//r22


//Always keep Cannel Pointers and Offsets in same GRF, so that we can use
// NODDCLR, NODDCHK flags. -rT


//Keep fORIGIN_X_NLAS, fY_OFFSET_2ND_BLOCK, fSTEP_X_NLAS, pMSGDSC_COPY, ubCONST_ALPHA_COPY as
//sub registers of same GRF to enable using NODDCLR NODDCHK. -rT

//r23


//Lumakey


//r24


//r25


//r26


//defines to generate LABELS during compile time.


//Msg payload buffers; upto 4 full-size messages can be written


.declare    muwMSGPAYLOAD0  Base=r29.0 ElementSize=2 SrcRegion=<16;16,1> Type=uw
.declare    muwMSGPAYLOAD1  Base=r38.0 ElementSize=2 SrcRegion=<16;16,1> Type=uw
.declare    muwMSGPAYLOAD2  Base=r47.0 ElementSize=2 SrcRegion=<16;16,1> Type=uw
.declare    muwMSGPAYLOAD3  Base=r56.0 ElementSize=2 SrcRegion=<16;16,1> Type=uw

.declare    mubMSGPAYLOAD0  Base=r29.0 ElementSize=1 SrcRegion=<16;16,1> Type=ub
.declare    mubMSGPAYLOAD1  Base=r38.0 ElementSize=1 SrcRegion=<16;16,1> Type=ub
.declare    mubMSGPAYLOAD2  Base=r47.0 ElementSize=1 SrcRegion=<16;16,1> Type=ub
.declare    mubMSGPAYLOAD3  Base=r56.0 ElementSize=1 SrcRegion=<16;16,1> Type=ub


//_SAVE_INC_


	// At the save module we have all 8 address sub-registers available.
	// So we will use PING-PONG type of scheme to save the data using
	// pointers pBUF_CHNL_TOP_8x4 and pBUF_CHNL_BOT_8x4. This will help
	// reduce dependency. - rT

	//wBUFF_CHNL_PTR points to either buffer 0 or buffer 4.
	//Add appropriate offsets to get pointers for all buffers (1,2,3 or 5).
	//Offsets are zero for buffer 0 and buffer 4.
	add   (4) a0.0:uw   r22.0<4;4,1>:w          0:uw
	add   (4) a0.4:uw   r22.0<4;4,1>:w          512:uw

	//Set up header for Y,U and V data
	mov  (8) r28<1>:ud      r27<8;8,1>:ud
	mov  (8) r37<1>:ud      r27<8;8,1>:ud

	mov  (2) r28.0<1>:d     r7.0<2;2,1>:w                   		{ NoDDClr }  		//ORI Y (LUMA) 	= ORI
	mov  (1) r37.0<1>:d     r7.0<0;1,0>:w                   		{ NoDDClr }  		//H ORI (CHROMA)	= H ORI
	shr  (1) r37.1<1>:d     r7.1<0;1,0>:w            1:w  		{ NoDDClr, NoDDChk }  	//V ORI (CHROMA)	= V ORI/2

  	mov  (1) r28.2<1>:ud    0xF000F:ud	{ NoDDChk }  // Y Block width and height (16x16)
	mov  (1) r37.2<1>:ud    0x7000F:ud  	{ NoDDChk }  // UV Block width and height(16x8)

// Unscramble, and pack data directly to MRFs

//	Data 16x16 block is divided as -
//		---------
//		|   0   |
//		---------
//		|   1  	|
//		---------
//		|   2  	|
//		---------
//		|   3  	|
//		---------
//		All sub-blocks are of size 16x4
//		0: ubBUFFER_0
//		1: ubBUFFER_1, ubBUFFER_0+16
//		2: ubBUFFER_2
//		3: ubBUFFER_3, ubBUFFER_2+16


//Add rounding operations to all the buffers.
        add.sat (16) uwBUFFER_0(0)<1>    uwBUFFER_0(0)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(1)<1>    uwBUFFER_0(1)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(4)<1>    uwBUFFER_0(4)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(5)<1>    uwBUFFER_0(5)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(6)<1>    uwBUFFER_0(6)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(7)<1>    uwBUFFER_0(7)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(8)<1>    uwBUFFER_0(8)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(9)<1>    uwBUFFER_0(9)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(12)<1>    uwBUFFER_0(12)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(13)<1>    uwBUFFER_0(13)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(14)<1>    uwBUFFER_0(14)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(15)<1>    uwBUFFER_0(15)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(16)<1>    uwBUFFER_0(16)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(17)<1>    uwBUFFER_0(17)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(20)<1>    uwBUFFER_0(20)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(21)<1>    uwBUFFER_0(21)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(22)<1>    uwBUFFER_0(22)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(23)<1>    uwBUFFER_0(23)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(24)<1>    uwBUFFER_0(24)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(25)<1>    uwBUFFER_0(25)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(28)<1>    uwBUFFER_0(28)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(29)<1>    uwBUFFER_0(29)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(30)<1>    uwBUFFER_0(30)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(31)<1>    uwBUFFER_0(31)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(32)<1>    uwBUFFER_0(32)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(33)<1>    uwBUFFER_0(33)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(36)<1>    uwBUFFER_0(36)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(37)<1>    uwBUFFER_0(37)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(38)<1>    uwBUFFER_0(38)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(39)<1>    uwBUFFER_0(39)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(40)<1>    uwBUFFER_0(40)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(41)<1>    uwBUFFER_0(41)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(44)<1>    uwBUFFER_0(44)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(45)<1>    uwBUFFER_0(45)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(46)<1>    uwBUFFER_0(46)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(47)<1>    uwBUFFER_0(47)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(48)<1>    uwBUFFER_0(48)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(49)<1>    uwBUFFER_0(49)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(52)<1>    uwBUFFER_0(52)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(53)<1>    uwBUFFER_0(53)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(54)<1>    uwBUFFER_0(54)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(55)<1>    uwBUFFER_0(55)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(56)<1>    uwBUFFER_0(56)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(57)<1>    uwBUFFER_0(57)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(60)<1>    uwBUFFER_0(60)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(61)<1>    uwBUFFER_0(61)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(62)<1>    uwBUFFER_0(62)<16;16,1>    0x0080:uw
        add.sat (16) uwBUFFER_0(63)<1>    uwBUFFER_0(63)<16;16,1>    0x0080:uw


//Buffer 0
//Move Y to msg payload
	mov  (16)  mubMSGPAYLOAD0(0,0)<1>			r[a0.1, 1]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(0,16)<1>			r[a0.1, 33]<32;16,2>:ub		{ NoDDChk }
	mov  (16)  mubMSGPAYLOAD0(1,0)<1>			r[a0.1, 65]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(1,16)<1>			r[a0.1, 97]<32;16,2>:ub		{ NoDDChk }

//Move U to msg payload
	mov  (8)  mubMSGPAYLOAD1(0,0)<2>			r[a0.2, 1]<32;8,4>:ub		{ NoDDClr }
	mov  (8)  mubMSGPAYLOAD1(0,16)<2>			r[a0.2, 65]<32;8,4>:ub		{ NoDDClr, NoDDChk }

//Move V to msg payload
	mov  (8)  mubMSGPAYLOAD1(0,1)<2>			r[a0.0, 1]<32;8,4>:ub		{ NoDDClr, NoDDChk }
	mov  (8)  mubMSGPAYLOAD1(0,17)<2>			r[a0.0, 65]<32;8,4>:ub		{ NoDDChk }

	add   (4) a0.0:uw   			r22.0<4;4,1>:w		1024:uw	//Update Buffer 2 pointers

//Buffer 1
	mov  (16)  mubMSGPAYLOAD0(2,0)<1>			r[a0.5, 1]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(2,16)<1>			r[a0.5, 33]<32;16,2>:ub		{ NoDDChk }
	mov  (16)  mubMSGPAYLOAD0(3,0)<1>			r[a0.5, 65]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(3,16)<1>			r[a0.5, 97]<32;16,2>:ub		{ NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(1,0)<2>			r[a0.6, 1]<32;8,4>:ub		{ NoDDClr }
	mov  (8)  mubMSGPAYLOAD1(1,16)<2>			r[a0.6, 65]<32;8,4>:ub		{ NoDDClr, NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(1,1)<2>			r[a0.4, 1]<32;8,4>:ub		{ NoDDClr, NoDDChk }
	mov  (8)  mubMSGPAYLOAD1(1,17)<2>			r[a0.4, 65]<32;8,4>:ub		{ NoDDChk }

	add   (4) a0.4:uw   		r22.0<4;4,1>:w          1536:uw	//Update Buffer 3 pointers

//Buffer 2
	mov  (16)  mubMSGPAYLOAD0(4,0)<1>			r[a0.1, 1]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(4,16)<1>			r[a0.1, 33]<32;16,2>:ub		{ NoDDChk }
	mov  (16)  mubMSGPAYLOAD0(5,0)<1>			r[a0.1, 65]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(5,16)<1>			r[a0.1, 97]<32;16,2>:ub		{ NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(2,0)<2>			r[a0.2, 1]<32;8,4>:ub		{ NoDDClr }
	mov  (8)  mubMSGPAYLOAD1(2,16)<2>			r[a0.2, 65]<32;8,4>:ub		{ NoDDClr, NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(2,1)<2>			r[a0.0, 1]<32;8,4>:ub		{ NoDDClr, NoDDChk }
	mov  (8)  mubMSGPAYLOAD1(2,17)<2>			r[a0.0, 65]<32;8,4>:ub		{ NoDDChk }

//Buffer 3
	mov  (16)  mubMSGPAYLOAD0(6,0)<1>			r[a0.5, 1]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(6,16)<1>			r[a0.5, 33]<32;16,2>:ub		{ NoDDChk }
	mov  (16)  mubMSGPAYLOAD0(7,0)<1>			r[a0.5, 65]<32;16,2>:ub		{ NoDDClr }
	mov  (16)  mubMSGPAYLOAD0(7,16)<1>			r[a0.5, 97]<32;16,2>:ub		{ NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(3,0)<2>			r[a0.6, 1]<32;8,4>:ub		{ NoDDClr }
	mov  (8)  mubMSGPAYLOAD1(3,16)<2>			r[a0.6, 65]<32;8,4>:ub		{ NoDDClr, NoDDChk }

	mov  (8)  mubMSGPAYLOAD1(3,1)<2>			r[a0.4, 1]<32;8,4>:ub		{ NoDDClr, NoDDChk }
	mov  (8)  mubMSGPAYLOAD1(3,17)<2>			r[a0.4, 65]<32;8,4>:ub		{ NoDDChk }
//===========================================================================

send (1)    null<1>:d    r28   	0x5			0x120A8018:ud
send (1)    null<1>:d    r37   	0x5			0xA0A8019:ud
